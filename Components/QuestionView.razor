@using BlHell_per.Core.Questions
@using BlHell_per.Core;

@{
}
<MudCard Outlined="true" style="@($"background-color:{this.colorBackground}")">
    <MudStack Spacing="2">
        <MudPaper Class="@cst">
            <MudStack Row>
                <MudText class="ml-4 mb-2" Style="white-space: pre-line;" Typo="Typo.h6">
                    @if (Index != null)
                    {
                        <MudChip T="string" Style="font-size:1.5rem" Variant="Variant.Filled" Color="@color" Size="Size.Large">@this.Index</MudChip>
                    }
                    @QuestionModel.Title
                </MudText>
            </MudStack>
            @if (QuestionModel.Tags != null)
            {
                @foreach (string tag in QuestionModel.Tags)
                {
                    <MudChip Class="ml-4" T="string" Style="font-size:1rem" Variant="Variant.Filled" Color="@color" Size="Size.Medium">@tag</MudChip>
                }
            }
        </MudPaper>
        <MudPaper>
            <MudDivider DividerType="DividerType.Middle" />
            <MudStack class="ma-4" Row Wrap="Wrap.Wrap" Spacing="1">
                @for (int i = 0; i < QuestionModel.Answers.Length; i++)
                {
                    int local_i = i;

                    string? answer = QuestionModel.Answers[local_i];
                    if (answer == null || answer == "") continue;

                    ButtonContext context = _contexts[local_i];

                    <MudButton id="answer" Class="@context.Style" Variant="Variant.Outlined" Disabled="context.isDisabled" @onclick="@(e => OnAnswerClick(context))">
                        <MudText Typo="Typo.body1">@answer</MudText>
                    </MudButton>
                }
            </MudStack>
            @if (this.Status != -1)
            {
                <MudDivider DividerType="DividerType.Middle" />
                <MudChip T="string" Class="d-flex align-center" Style="font-size:1.5rem" Variant="Variant.Text" Color="@color" Size="Size.Large">@_resultText</MudChip>
            }
        </MudPaper>
    </MudStack>
</MudCard>

@code {
    [Parameter]
    [EditorRequired]
    public required Question QuestionModel { get; set; }

    [Parameter]
    public int? Index { get; set; }

    [Parameter]
    public EventCallback<int> QuestionAnsweredCallback { get; set; }

    private record ButtonContext
    {
        public int Status { get; init; } = 0;
        public string Style { get; set; }
        public bool isDisabled { get; set; } = false;
    }

    private ButtonContext[] _contexts;

    private string cst
    {
        get => this.Status switch
        {
            0 => "custom-striped hard op75",
            1 => "custom-striped easy op75",
            2 => "custom-striped medium op75",
            _ => ""
        };
    }
    private Color color
    {
        get => this.Status switch
        {
            0 => Color.Error,
            1 => Color.Success,
            2 => Color.Warning,
            _ => Color.Default
        };
    }
    private string _resultText
    {
        get => this.Status switch
        {
            0 => "Неверно",
            1 => "Верно",
            2 => "Пропущено"
        };
    }

    public int Status = -1;

    private string colorBackground
    {
        get => this.Status switch
        {
            0 => Colors.Red.Accent4,
            1 => Colors.Green.Accent4,
            2 => Colors.Amber.Accent4,
            _ => ""
        };
    }
    protected override async Task OnInitializedAsync()
    {
        this._contexts = new ButtonContext[QuestionModel.Answers.Length];
        for(int i = 0;i < this.QuestionModel.Answers.Length; i ++)
        {
            this._contexts[i] = new ButtonContext()
                {
                    Status = i == this.QuestionModel.RId ? 1 : i == 5? 2 : 0
                };
        }
    }
    private string getClassByStatus(int status)
    {
        return status switch
        {
            0 => "custom-striped hard op75",
            1 => "custom-striped easy op75",
            2 => "custom-striped medium op75",
            _ => ""
        };
    }
    private string getClassByStatus1(int status)
    {
        return status switch
        {
            1 => "custom-easy-op75",
            _ => ""
        };
    }


    private async void OnAnswerClick(ButtonContext context)
    {
        foreach (ButtonContext ctx in this._contexts)
        {
            ctx.isDisabled = true;
            this.Status = context.Status;
            if (ctx == context)
            {
                ctx.Style = getClassByStatus(ctx.Status);
            } else if (ctx.Status == 1)
            {
                ctx.Style = getClassByStatus1(ctx.Status);
            }

        }
        await QuestionAnsweredCallback.InvokeAsync(Status);
    }
}
