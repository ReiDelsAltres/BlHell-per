@inherits TemplateComponentBase

@inject IJSRuntime JS

@using BlHell_per.Core.Compat;
@using BlHell_per.Core.Questions
@using System.Text.Json;
@using System.Text.Json.Serialization;


<MudCard Outlined="true" style="@($"background-color:{this.BackgroundColor};")">
    @if(this.AllowJsonView)
    {
        <div style="position: relative">
            <MudChip T="string" Color="@Color" Style="position: absolute; right: -20px; top: -20px; z-index:1" OnClick="@(this.SwitchView)">
                <MudIcon Icon="@Icons.Material.Filled.DataObject" Disabled="Disabled"></MudIcon>
            </MudChip>
        </div>
    }
    @if(this._IsJsonView)
    {
        <Animation Enabled="this.AllowJsonView" Effect="@Effect.FlipInY" Speed="@Speed.Fast" Delay="@Delay.None" IterationCount="1">
            <MudPaper Class="ma-2" Style="transition-property: all; transition-property: transform;">
                <pre class="ma-4" style="white-space: pre-wrap;">
                    @this._JsonOriginate
                </pre>
            </MudPaper>
        </Animation>
        return;   
    }
    <Animation Enabled="this.AllowJsonView" Effect="@Effect.FlipInY" Speed="@Speed.Fast" Delay="@Delay.None" IterationCount="1">
        <MudStack Spacing="2">
            <MudPaper Class="@this.Class" Style="@CssStyle">
                <MudStack Row>
                    <MudText @key="QuestionModel.Title" class="ml-4 mr-4 mb-2" Style="white-space: pre-line;" Typo="Typo.h6">
                        <MudStack Row>
                            @if (Index != null)
                            {
                                <MudChip T="string" Style="font-size:1.5rem" Variant="Variant.Filled" Color="@this.Color" Size="Size.Large">@this.Index</MudChip>
                            }
                            <div id="@("latexContainer" + Index)">
                                <MudHighlighter Text="@(QuestionModel.Title)" HighlightedText="@HighlitedText"/>
                            </div>
                        </MudStack>
                    </MudText>
                </MudStack>
                @if (QuestionModel.Tags != null)
                {
                    @foreach (string tag in QuestionModel.Tags)
                    {
                        <MudChip Class="ml-4" T="string" Style="font-size:1rem" Variant="Variant.Filled" Color="@this.Color" Size="Size.Medium" Disabled="Disabled">
                            <MudHighlighter Text="@tag" HighlightedText="@HighlitedText" />
                        </MudChip>
                    }
                }
            </MudPaper>
            @if (this.ChildContent != null)
            {
                <MudPaper>
                    @ChildContent
                </MudPaper>
            }
        </MudStack>
    </Animation>
</MudCard>

@code {
    [Parameter]
    [EditorRequired]
    public required Question QuestionModel { get; set; }

    [Parameter]
    public bool AllowJsonView { get; set; } = false;

    [Parameter]
    public string? HighlitedText { get; set; }

    [Parameter] 
    public int? Index { get; set; }

    [Parameter]
    public bool Disabled { get; set; } = false;

    protected string[] LatexContainerIds { get; set; }
    protected Color Color { get; set; } = Color.Default;
    protected string? BackgroundColor { get; set; }
    protected string? Class { get; set; }
    protected string? CssStyle { get; set; }

    private string _JsonOriginate { get; set; }
    private bool _IsJsonView = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        this._JsonOriginate = JsonSerializer.Serialize(QuestionModel, SerializationHandler._options);
    }
    protected async Task SwitchView()
    {
        this._IsJsonView = !this._IsJsonView;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JS.InvokeVoidAsync("renderLatexText", "latexContainer" + Index);
        foreach (string id in LatexContainerIds)
        {
            await JS.InvokeVoidAsync("renderLatexText", id);
        }

        await base.OnAfterRenderAsync(firstRender);
    }
}