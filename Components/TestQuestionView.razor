@inherits QuestionViewBase;

@using BlHell_per.Core;

<MudDivider DividerType="DividerType.Middle" />
<MudStack class="ma-4" Row Wrap="Wrap.Wrap" Spacing="1">
    @for (int i = 0; i < QuestionModel.Answers.Length; i++)
    {
        int local_i = i;

        string? answer = QuestionModel.Answers[local_i];
        if (answer == null || answer == "") continue;

        ButtonContext context = _contexts[local_i];

        <MudButton id="answer" Class="@context.Style" Variant="Variant.Outlined" Disabled="context.isDisabled" @onclick="@(e => OnAnswerClick(context))">
            <MudText Typo="Typo.body1">@answer</MudText>
        </MudButton>
    }
</MudStack>
@if (this.Status != -1)
{
    <MudDivider DividerType="DividerType.Middle" />
    <MudChip T="string" Class="d-flex align-center" Style="font-size:1.5rem" Variant="Variant.Text" Color="@Color" Size="Size.Large">@_resultText</MudChip>
}


@code {
    protected override RenderFragment BaseContent => (builder) => base.BuildRenderTree(builder);

    [Parameter]
    public EventCallback<int> QuestionAnsweredCallback { get; set; }

    private record ButtonContext
    {
        public int Status { get; init; } = 0;
        public string Style { get; set; }
        public bool isDisabled { get; set; } = false;
    }

    private ButtonContext[] _contexts;

    private string _resultText
    {
        get => this.Status switch
        {
            0 => "Неверно",
            1 => "Верно",
            2 => "Пропущено"
        };
    }

    private int _Status = -1;
    public int Status 
    {
        get => this._Status;
        set
        {
            this.BackgroundColor = value switch
            {
                0 => Colors.Red.Accent4,
                1 => Colors.Green.Accent4,
                2 => Colors.Amber.Accent4,
                _ => ""
            };
            this.Color = value switch
            {
                0 => Color.Error,
                1 => Color.Success,
                2 => Color.Warning,
                _ => Color.Default
            };
            this.CssStyle = value switch
            {
                0 => CSS.GetStripedBackground("#f5454575", "#b32d2d75").Css,
                1 => CSS.GetStripedBackground("#71f07775", "#4db05275").Css,
                2 => CSS.GetStripedBackground("#fa871b75", "#cf701675").Css,
                _ => ""
            };
            this._Status = value;
        }
    }
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        QuestionModel.Shuffle();
        QuestionModel.InsertAnswer("Пропустить вопрос");

        this._contexts = new ButtonContext[QuestionModel.Answers.Length];
        for (int i = 0; i < this.QuestionModel.Answers.Length; i++)
        {
            this._contexts[i] = new ButtonContext()
                {
                    Status = i == this.QuestionModel.RId ? 1 : i == 5 ? 2 : 0
                };
        }
    }
    private string getClassByStatus(int status)
    {
        return status switch
        {
            0 => "custom-striped hard op75",
            1 => "custom-striped easy op75",
            2 => "custom-striped medium op75",
            _ => ""
        };
    }
    private string getClassByStatus1(int status)
    {
        return status switch
        {
            1 => "custom-easy op75 ",
            _ => ""
        };
    }


    private async void OnAnswerClick(ButtonContext context)
    {
        foreach (ButtonContext ctx in this._contexts)
        {
            ctx.isDisabled = true;
            this.Status = context.Status;
            if (ctx == context)
            {
                ctx.Style = getClassByStatus(ctx.Status);
            }
            else if (ctx.Status == 1)
            {
                ctx.Style = getClassByStatus1(ctx.Status);
            }

        }
        await QuestionAnsweredCallback.InvokeAsync(Status);
    }

}
