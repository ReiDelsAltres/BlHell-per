@inherits QuestionViewBase;

@using BlHell_per.Core;

<MudDivider DividerType="DividerType.Middle" />
<div id="@("latexContainerAnswers" + Index)">
    <MudStack class="ma-4" Row Wrap="Wrap.Wrap" Spacing="1">
        @foreach(AnswerContext context in this.answerContexts)
        {
            <MudButton Style="@context.CssStyle" Variant="Variant.Outlined" Disabled="Disabled" @onclick="@(e => OnAnswerClick(context))">
                <MudText Typo="Typo.body1">@context.Answer</MudText>
            </MudButton>
        }
    </MudStack>
</div>
@if (this.IsCompleted)
{
    string _resultText = this.status switch
    {
        0 => "Неверно",
        1 => "Верно",
        2 => "Пропущено"
    };

    <MudDivider DividerType="DividerType.Middle" />
    <MudChip T="string" Class="d-flex align-center" Style="font-size:1.5rem" Variant="Variant.Text" Color="@Color" Size="Size.Large">@_resultText</MudChip>
}


@code {
    protected override RenderFragment BaseContent => (builder) => base.BuildRenderTree(builder);

    #region Parameters
    [Parameter]
    public EventCallback<int> OnAnswerClickCallback { get; set; }

    private bool _IsCompleted;
    [Parameter]
    public bool IsCompleted
    {
        get => this._IsCompleted;
        set
        {
            if (_IsCompleted == value) return;
            this._IsCompleted = value;
            this.Disabled = value;

            this.ReApplyStyle();
        }
    }

    [Parameter]
    public bool Immediate { get; set; } = true;
    [Parameter]
    public QuestionStyle Style { get; set; } = QuestionStyle.DEFAULT;

    #endregion Parameters

    private AnswerContext[] answerContexts;

    private int status = -1;

    #region Support

    #endregion Support

    #region Override
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        this.LatexContainerIds = new string[] { "latexContainerAnswers" + Index };

        this.QuestionModel.Shuffle();
        this.QuestionModel.InsertAnswer("Пропустить вопрос");

        this.answerContexts = new AnswerContext[this.QuestionModel.Answers.Length];
        for (int i = 0; i < this.answerContexts.Length; i++)
        {
            string answer = this.QuestionModel.Answers[i];

            int rid = this.QuestionModel.RId ?? 1;
            int status = i switch
            {
                var n when i == rid => 1,
                var n when (i+1) == this.answerContexts.Length => 2,
                _ => 0
            };

            this.answerContexts[i] = new AnswerContext(status, answer);
        }
    }
    #endregion Override

    private void ReApplyStyle()
    {
        this.CssStyle = this.Style.CssStyle(this.status, this.IsCompleted);
        this.Color = this.Style.Color(this.status, this.IsCompleted);
        this.BackgroundColor = this.Style.BackgroundColor(this.status, this.IsCompleted);
        foreach (AnswerContext context in this.answerContexts)
        {
            context.CssStyle = this.Style.ButtonCssStyle(context.isLastPressed, context.Status, this.IsCompleted);
        }
        var v = "";
    }

    private async Task OnAnswerClick(AnswerContext context)
    {
        foreach (AnswerContext lcontext in this.answerContexts)
        {
            lcontext.isLastPressed = false;
        }

        context.isLastPressed = true;
        this.status = context.Status;

        await this.OnAnswerClickCallback.InvokeAsync(context.Status);

        if (this.Immediate)
        {
            this.IsCompleted = true;
        } else
        {
            this.ReApplyStyle();
        }
    }

    #region Structs
    private record AnswerContext
    {
        public AnswerContext(int status, string answer) => 
            (this.Status,this.Answer) = (status,answer);

        public int Status { get; init; }
        public string Answer { get; init; }

        public string CssStyle { get; set; } = "";

        public bool isLastPressed { get; set; }
    }
    public struct QuestionStyle
    {
        public static QuestionStyle DEFAULT = new QuestionStyle()
        {
                CssStyle = (status, isCompleted) => status switch
                {
                    var n when !isCompleted && status != -1 => CSS.GetStripedBackground("#fffff550", "#b3b2a450").Css,

                    0 => CSS.GetStripedBackground("#f5454575", "#b32d2d75").Css,
                    1 => CSS.GetStripedBackground("#71f07775", "#4db05275").Css,
                    2 => CSS.GetStripedBackground("#fa871b75", "#cf701675").Css,
                    _ => ""
                },
                Color = (status, isCompleted) => status switch
                {
                    var n when !isCompleted && status != -1 => MudBlazor.Color.Default,

                    0 => MudBlazor.Color.Error,
                    1 => MudBlazor.Color.Success,
                    2 => MudBlazor.Color.Warning,
                    _ => MudBlazor.Color.Default
                },
                BackgroundColor = (status, isCompleted) => status switch
                {
                    var n when !isCompleted && status != -1 => "",

                    0 => Colors.Red.Accent4,
                    1 => Colors.Green.Accent4,
                    2 => Colors.Amber.Accent4,
                    _ => ""
                },
                ButtonCssStyle = (isLastPressed, status, isCompleted) => status switch
                {
                    var n when isLastPressed && (!isCompleted && status != -1) => CSS.GetStripedBackground("#fffff550", "#b3b2a450").Css,
                    var n when (isCompleted && !isLastPressed) && status == 1 => "background-color: #71f07775",
                    var n when !isLastPressed => "",

                    0 => CSS.GetStripedBackground("#f5454575", "#b32d2d75").Css,
                    1 => CSS.GetStripedBackground("#71f07775", "#4db05275").Css,
                    2 => CSS.GetStripedBackground("#fa871b75", "#cf701675").Css,
                    _ => ""
                }
        };

        public required Func<bool, int, bool, string> ButtonCssStyle;

        public required Func<int, bool, string> CssStyle;
        public required Func<int, bool, Color> Color;
        public required Func<int, bool, string> BackgroundColor;
    }
    #endregion Structs
}
