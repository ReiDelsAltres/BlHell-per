@page "/Subject/Test/{Name}"
@page "/Subject/Test/{Name}/{num:int}/{min:int}/{max:int}/{random:bool}/{allowjsonview:bool}"

@using System.Text.RegularExpressions;
@using System.Web;
@using BlHell_per.Core;
@using BlHell_per.Components;
@using BlHell_per.Core.Compat;
@using BlHell_per.Core.Questions;

@using System.Text.Json;

@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager Navigation

<MudText id="top" Typo="Typo.h3" Align="Align.Center" GutterBottom>@Info.Subject.getSubject(this.name).TranslatedName</MudText>

@if (questionsArray == null || questionsArray.Length == 0) 
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
} else 
{
    <MudGrid class="pb-20">
        @{
            int i = 0;
        }
        @foreach(Question question in this.questionsArray)
        {
            int local_i = i;
            <MudItem xs="12" sm="6" md="4" lg="3" xl="2">
                <MudPaper>
                    <TestQuestionView @key="question" Index="local_i + 1" QuestionModel="@question" OnAnswerClickCallback="@(e => this.onQuestionAnswered(e, local_i))"
                                      AllowJsonView="allowjsonview" Immediate="@(!specialMode)" IsCompleted="@testEnded" />
                </MudPaper>
            </MudItem>
            i++;
        }
    </MudGrid>
    @if (this.specialMode)
    {
        <MudButton Class="pa-5 mb-15" Size="Size.Large" Variant="Variant.Outlined" FullWidth="true" @onclick="@(x => {
            this.testEnded = true;
            this.dialogVisible = true;
            this.StateHasChanged();})">Закончить тест</MudButton>
    }
<MudDialog Visible="this.dialogVisible">
    <TitleContent>
        <MudText Typo="Typo.h5">
            Результат
        </MudText>
    </TitleContent>
    <DialogContent>
        @{
            int wrong = Array.FindAll(this.statuses, e => e == 0).Count();
            int right = Array.FindAll(this.statuses, e => e == 1).Count();
            int skip = Array.FindAll(this.statuses, e => e == 2).Count();

            <MudText Typo="Typo.h6">Ошибочно: <MudChip T="string" Style="font-size:1.4rem" Variant="Variant.Filled" Color="Color.Error">@wrong</MudChip> </MudText>
            <MudText Typo="Typo.h6">Верно: <MudChip T="string" Style="font-size:1.4rem" Variant="Variant.Filled" Color="Color.Success">@right</MudChip> </MudText>
            <MudText Typo="Typo.h6">Пропущено: <MudChip T="string" Style="font-size:1.4rem" Variant="Variant.Filled" Color="Color.Warning">@skip</MudChip> </MudText>

            int score = Math.Max((right * 2) - wrong, 0);
            <MudDivider />
            <MudText Typo="Typo.h6">Набранный балл: <MudChip T="string" Style="font-size:1.4rem" Variant="Variant.Filled" Color="Color.Primary">@score</MudChip> </MudText>
            <MudProgressLinear Color="Color.Primary" Value="@(score * 2)" Size="Size.Medium" />
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@(e => this.dialogVisible = false)">Закрыть</MudButton>
        <MudButton OnClick="@(async e => {await this.OnParametersSetAsync();this.Navigation.NavigateTo(this.Navigation.Uri+"#top");})">Повторить</MudButton>
    </DialogActions>
</MudDialog>
}

@code {
    [Parameter]
    public string name { get; set; }

    [Parameter]
    public int num { get; set; }
    [Parameter]
    public int min { get; set; }
    [Parameter]
    public int max { get; set; }

    [Parameter]
    public bool random { get; set; }

    [Parameter]
    public bool allowjsonview { get; set; }

    private bool dialogVisible = false;

    private SerializationHandler<Question> serializationHandler;

    private string[] colors =
    {
        "#c0392b",
        "#2ecc71",
        "#d4ac0d"
    };

    private Question[] questionsArray;

    private int statusesCounter;
    private int[] statuses;

    private bool shouldRender = true;
    private bool specialMode = false;
    private bool testEnded = false;

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        Task task = new Task(()=> { });
        try 
        { 
            task = base.OnAfterRenderAsync(firstRender); 
        }
        catch (Exception _) {}
        return task;
    }


    protected override async Task OnInitializedAsync()
    {
        this.serializationHandler = 
        await PWA.UniversalDeserializeJson<SerializationHandler<Question>>($"resources/{name}.json", JS, Http, SerializationHandler._options);

        this.specialMode = this.num == default;
        if (this.specialMode)
        {
            this.num = 25;
            this.min = 0;
            this.max = serializationHandler.Questions.Length;
            this.random = true;
            this.allowjsonview = false;
        }

        await base.OnInitializedAsync();
    }
    protected override async Task OnParametersSetAsync()
    {
        Question[] questions = serializationHandler.Questions.Extract(this.min, this.max);
        if (random) questions.Shuffle();

        if (questionsArray == null)
            this.questionsArray = new Question[this.num];

        Array.Copy(questions, this.questionsArray, this.num);

        this.statuses = new int[this.num];
        Array.Fill(this.statuses, -1);

        this.testEnded = false;
        this.dialogVisible = false;

        await base.OnParametersSetAsync();
    }

    private async void onQuestionAnswered(int result,int index)
    {
        this.statuses[index] = result;
        this.shouldRender = false;

        if (Array.FindAll(statuses, e => e == -1).Count() == 0 && !this.specialMode)
        {
            this.testEnded = true;
            this.dialogVisible = true;
            this.StateHasChanged();
        }
    }

    protected override bool ShouldRender()
    {
        if (!this.shouldRender)
        {
            this.shouldRender = true;
            return false;
        }
        return base.ShouldRender();
    }
}
