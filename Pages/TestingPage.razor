@page "/Test/{name}/{num:int}/{min:int}/{max:int}/{random:bool}"
@inherits MathJaxContentComponentFixed;

@using System.Web;
@using System.Text.RegularExpressions;
@using OpenAI.Chat;
@using MathJaxBlazor;
@using BlHell_per.BlazorClasses;
@using BlHell_per.Base.Compat;
@using BlHell_per.Base.Questions;

@inject HttpClient Http

<h3>TestingPage - @name @num</h3>

@if (baseQuestions == null || baseQuestions.Length == 0) 
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
} else 
{
    <div class="question-grid" style="display:grid">
        @for (int j = 0; j < baseQuestions.Length; j++)
        {
            Question question = baseQuestions[j];
            int ind = j + 1;

            <div class="question border" role="gridcell" aria-live="assertive" aria-atomic="true">
                <div class="toast-header">
                    <strong class="me-auto" style="white-space: pre-line">@ind.(@question.Id).@question.Title</strong>

                </div>

                <div class="toast-body">
                    @for (int i = 0; i < question.Answers.Length; i++)
                    {
                        string? answer = question.Answers[i];
                        if (answer == null || answer == "") continue;

                        List<ButtonContext> contexts = doubleContextsList[j];
                        ButtonContext context = contexts[i];

                        int js = j;

                        <button class="btn btn-primary" 
                        style="white-space: pre-line; background-color:@context.color; border-color:@context.color" 
                        disabled="@context.isDisabled" @onclick="@(e => questionAnswered(context,contexts,js))">
                            @question.Answers[i]
                        </button>
                    }
                </div>

                @switch (statuses[j])
                {
                    case 0:
                        <div class="local-result" style="color:@colors[0]">Верно</div>
                        break;
                    case 2:
                        <div class="local-result" style="color:@colors[2]">Неверно</div>
                        break;
                    case 1:
                        <div class="local-result" style="color:@colors[1]">Пропущено</div>
                        break;
                    default: break;

                }
            </div>
        }

        @if (statuses.FindAll(e => e == -1).Count == 0) 
        {
            int right = statuses.FindAll(e => e == 0).Count;
            int wrong = statuses.FindAll(e => e == 2).Count;
            int skip = statuses.FindAll(e => e == 1).Count;

            <div class="result" style="color:@colors[0]">Верно: @right</div>
            <div class="result" style="color:@colors[2]">Ошибочно: @wrong</div>
            <div class="result" style="color:@colors[1]">Пропущено: @skip</div>

            if (statuses.Count == 25) 
            {
                int score = Math.Max((right * 2) - wrong,0);
                <div class="result" style="color:#8e44ad">Набранный балл: @score</div>
            }
        }

    </div>
}

@code {
    private record ButtonContext {
        public required int index { get; set; }
        public required string color { get; set; }
        public required bool isDisabled { get; set; }
        public required Question question { get; set; }
    }
    private string[] colors =
    {
        "#2ecc71",
        "#d4ac0d",
        "#c0392b"
    };
    [Parameter]
    public bool random { get; set; }
    [Parameter]
    public string name { get; set; }

    [Parameter]
    public int num { get; set; }
    [Parameter]
    public int min { get; set; }
    [Parameter]
    public int max { get; set; }

    private int answeredNum;

    private BaseQuestion[] baseQuestions;
    private List<List<ButtonContext>> doubleContextsList;
    private List<int> statuses;

    private void questionAnswered(ButtonContext context, List<ButtonContext> contexts,int idx)
    {
        int crunchStatus = -1;
        foreach (ButtonContext buttonContext in contexts) 
        {
            if (buttonContext == context) 
            {
                if (buttonContext.index == buttonContext.question.RId) 
                {
                    buttonContext.color = "#2ecc71";
                    crunchStatus = 0;
                } else if (buttonContext.index == 5) 
                {
                    buttonContext.color = "#d4ac0d";
                    crunchStatus = 1;
                } else
                {
                    buttonContext.color = "#c0392b";
                    crunchStatus = 2;
                }
            } else 
            {
                buttonContext.color = buttonContext.index == buttonContext.question.RId ? "#2ecc71" : buttonContext.color;
            }

            buttonContext.isDisabled = true;
        }
        this.statuses[idx] = crunchStatus;

        this.answeredNum++;
    }
    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        Task task = new Task(()=> { });
        try 
        { 
            task = base.OnAfterRenderAsync(firstRender); 
        }
        catch (Exception _) {}
        return task;
    }


    protected override async Task OnInitializedAsync()
    {
        SerializationHandler<Question> serializationHandler = await SerializationHandler<Question>.DeserializeAsync($"resources/{name}.json", Http);
        BaseQuestion[] bases = BaseQuestion.Trans(serializationHandler.Questions, this.min, this.max);

        if (random) bases.Shuffle();
        Array.Copy(bases, this.baseQuestions = new BaseQuestion[this.num], this.num);
        foreach (BaseQuestion q in this.baseQuestions) q.Shuffle();

        ///////////////////////////////////////////////////////

        this.doubleContextsList = new List<List<ButtonContext>>();
        this.statuses = new List<int>();
        for (int j = 0; j < this.baseQuestions.Length; j++) 
        {
            this.statuses.Add(-1);
            Question question = this.baseQuestions[j];
            List<ButtonContext> contexts = new List<ButtonContext>();

            for (int i = 0; i < 6; i++) 
            {
                contexts.Add(new ButtonContext
                    {
                        color = "#7fb3d5",
                        index = i,
                        isDisabled = false,
                        question = question
                    });
            }
            this.doubleContextsList.Add(contexts);
        }

        await base.OnInitializedAsync();
    }
}
