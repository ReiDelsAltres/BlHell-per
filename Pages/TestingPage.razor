@page "/Subject/Test/{Name}"
@page "/Subject/Test/{Name}/{num:int}/{min:int}/{max:int}/{random:bool}/{allowjsonview:bool}"

@using System.Text.RegularExpressions;
@using System.Web;
@using BlHell_per.Components;
@using BlHell_per.Core.Compat
@using BlHell_per.Core.Questions

@inject HttpClient Http
@inject IJSRuntime JS

<h3>TestingPage - @name @num</h3>

@if (questionsArray == null || questionsArray.Length == 0) 
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
} else 
{
    <div class="question-grid" style="display:grid">
        <MudGrid class="pb-20">
            @for (int i = 0; i < questionsArray.Length; i++)
            {
                int local_i = i;
                Question question = questionsArray[local_i];

                <MudItem xs="12" sm="6" lg="4">
                    <MudPaper>
                        <ATestQuestionView Disabled="testEnded" Index="local_i + 1" QuestionModel="@question" QuestionAnsweredCallback="@(this.onQuestionAnswered)" AllowJsonView="allowjsonview" Show="@(!this.specialMode || testEnded)" />
                    </MudPaper>
                </MudItem>
            }
        </MudGrid>
        @if(this.specialMode)
        {
            <MudButton Class="pa-5 mb-15" Size="Size.Large" Variant="Variant.Outlined" FullWidth="true" @onclick="@(x => onSubmit())">Закончить тест</MudButton>
        }
        <TestinPage_TestEndDialog Statuses="statuses" @bind-Visible="testEnded"/>
    </div>
}

@code {
    [Parameter]
    public string name { get; set; }

    [Parameter]
    public int num { get; set; }
    [Parameter]
    public int min { get; set; }
    [Parameter]
    public int max { get; set; }

    [Parameter]
    public bool random { get; set; }

    [Parameter]
    public bool allowjsonview { get; set; }

    private string[] colors =
    {
        "#c0392b",
        "#2ecc71",
        "#d4ac0d"
    };

    private Question[] questionsArray;

    private int statusesCounter;
    private int[] statuses;

    private bool shouldRender = true;
    private bool specialMode = false;
    private bool showDialog = false;
    private bool testEnded = false;

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        Task task = new Task(()=> { });
        try 
        { 
            task = base.OnAfterRenderAsync(firstRender); 
        }
        catch (Exception _) {}
        return task;
    }


    protected override async Task OnInitializedAsync()
    {
        SerializationHandler<Question> serializationHandler = 
        await SerializationHandler<Question>.DeserializeAsync($"resources/{name}.json", Http, JS);

        this.specialMode = this.num == default;
        if (this.specialMode)
        {
            this.num = 25;
            this.min = 0;
            this.max = serializationHandler.Questions.Length;
            this.random = true;
            this.allowjsonview = false;
        }

        Question[] questions = serializationHandler.Questions.Extract(this.min,this.max);
        if (random) questions.Shuffle();

        this.questionsArray = new Question[this.num];
        Array.Copy(questions,this.questionsArray,this.num);

        this.statuses = new int[this.num];
        Array.Fill(this.statuses,-1);

        //this.questionsArray.Shuffle();

        await base.OnInitializedAsync();
    }
    private async void onQuestionAnswered((int,int) args)
    {
        this.statuses[args.Item2-1] = args.Item1;
        this.shouldRender = false;

        if (Array.FindAll(statuses, e => e == -1).Count() == 0)
        {
            await this.onSubmit();
            this.StateHasChanged();
        }
    }
    private async Task onSubmit()
    {
        this.showDialog = true;
        this.testEnded = true;
    }

    protected override bool ShouldRender()
    {
        if (!this.shouldRender)
        {
            this.shouldRender = true;
            return false;
        }
        return base.ShouldRender();
    }
}
