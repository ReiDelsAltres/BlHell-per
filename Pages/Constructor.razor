@page "/Constructor"
@inherits MathJaxContentComponentFixed;

@using BlHell_per.Components;
@using BlHell_per.Core.Compat
@using BlHell_per.Core.Questions
@using BlazorDownloadFile
<!---@using MathJaxBlazor;-->

@inject NavigationManager Navigation
@inject IJSRuntime JS

<PageTitle>Constructor</PageTitle>

<div class="question-grid" style="display:grid">
    @{
        int i = 0;
    }
    @foreach(var model in this.models) 
    {
        int reserve = i++;
        model.QuestionIndex = i;
        <MutableQuestion Model="model" />

        <button class="btn btn-outline-secondary" type="button" id="@reserve" style="background-color:orangered"
                @onclick="@(async arg => this.onClickDelete(model,arg))">
            Delete
        </button>
    }

    <button class="btn btn-outline-secondary" type="button" id="button-addon2" 
    @onclick="@(async arg => this.onClick(arg))">
        Add Question
    </button>
    @if(this.models.Count > 0) 
    {
        <button class="btn btn-outline-secondary" type="button" id="button-addon2"
        @onclick="@(async arg => await this.DownloadFileFromStream())">
            Download Constructed
        </button>
    }
</div>

@code {
    [Inject] IBlazorDownloadFileService BlazorDownloadFileService { get; set; }
    private List<MutableQuestion.DataModel> models = new();

    internal async void onClick(MouseEventArgs args)
    {
        this.models.Add(new());
    }
    internal async void onClickDelete(MutableQuestion.DataModel question, MouseEventArgs args)
    {
        this.models.Remove(question);
    }
    internal async Task DownloadFileFromStream()
    {
        Question[] questions = this.models.ConvertAll(mt => mt.CreateQuestion()).ToArray();
        bool isRid = questions.Any(q=>q.RId>0);
        SerializationHandler<Question> var = new(false,isRid,questions);

        byte[] bytes = System.Text.Encoding.UTF8.GetBytes(var.Serialize());
        await BlazorDownloadFileService.DownloadFile(fileName: "BlHell_per.q.razor.json",bytes: bytes, contentType: "application/octet-stream");
        //await JS.InvokeVoidAsync(identifier: "saveFile", "BlHell_per.q.razor.json", var.Serialize());
    }
}
