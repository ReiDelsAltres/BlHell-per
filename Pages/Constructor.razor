@page "/Constructor"
@inherits MathJaxContentComponentFixed;

@using BlHell_per.Base.Questions;
@using BlHell_per.Base.Compat;
@using BlHell_per.BlazorClasses;
@using BlazorDownloadFile
@using MathJaxBlazor;

@inject NavigationManager Navigation
@inject IJSRuntime JS

<PageTitle>Constructor</PageTitle>

<div class="question-grid" style="display:grid">
    @for (int i = 0;i<this.mutableQuestions.Count;i++)
    {
        MutableQuestionContext question = this.mutableQuestions[i];
        <MutableQuestion QuestionIndex="i+1" Answers="@question.Answers"
                         OnTitleChanged="@(val => question.Title = val)"
                         OnRightAnswerChanged="@(val => question.RightAnswer = val)" />
        <button class="btn btn-outline-secondary" type="button" id="button-addon2" style="background-color:orangered"
                @onclick="@(arg => this.onClickDelete(question,arg))">
                Delete
        </button>
    }

    <button class="btn btn-outline-secondary" type="button" id="button-addon2" 
            @onclick="@(arg => this.onClick(arg))">
        Add Question
    </button>
    @if(this.mutableQuestions.Count > 0) 
    {
        <button class="btn btn-outline-secondary" type="button" id="button-addon2"
                @onclick="@(async arg => await this.DownloadFileFromStream())">
            Download Constructed
        </button>
    }
</div>

@code {
    [Inject] IBlazorDownloadFileService BlazorDownloadFileService { get; set; }
    public record MutableQuestionContext() 
    {
        public int RightAnswer { get; set; } = 0;
        public string Title { get; set; } = "";
        public List<string> Answers { get; set; } = new();

        public Question CreateQuestion() 
        {
            int? rrid = (this.RightAnswer == -1 || this.RightAnswer == 0) ? null : this.RightAnswer;

            return new(null, rrid, this.Title, this.Answers.ToArray());
        }
    }
    private List<MutableQuestionContext> mutableQuestions = new();

    internal async void onClick(MouseEventArgs args)
    {
        this.mutableQuestions.Add(new());
    }
    internal async void onClickDelete(MutableQuestionContext question, MouseEventArgs args)
    {
        this.mutableQuestions.Remove(question);
    }
    internal async Task DownloadFileFromStream()
    {
        Question[] questions = this.mutableQuestions.ConvertAll(mt => mt.CreateQuestion()).ToArray();
        bool isRid = questions.Any(q=>q.RId>0);
        SerializationHandler<Question> var = new(false,isRid,questions);

        byte[] bytes = System.Text.Encoding.UTF8.GetBytes(var.Serialize());
        await BlazorDownloadFileService.DownloadFile(fileName: "BlHell_per.q.razor.json",bytes: bytes, contentType: "application/octet-stream");
        //await JS.InvokeVoidAsync(identifier: "saveFile", "BlHell_per.q.razor.json", var.Serialize());
    }
}
